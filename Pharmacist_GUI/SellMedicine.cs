using DevExpress.XtraEditors;
using PharmacistManagement_DAL.Model;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using System.Data.SqlClient;
using Pharmacist_BUS;
using System.Data.Entity.Validation;

namespace Pharmacist
{
    public partial class frm_SellMedicine : DevExpress.XtraEditors.XtraForm
    {
        private readonly MedicineServices medicineServices = new MedicineServices();
        private readonly BatchServices batchServices = new BatchServices();
        private readonly ReceiptServices receiptServices = new ReceiptServices();
        private readonly NHANVIEN currentEmployee;

        private readonly String receiptSavePath = "receipt/";
        public frm_SellMedicine(NHANVIEN employee)
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            PharmacistManagement_DAL.Model.PharmacyManagementDB dbContext = new PharmacistManagement_DAL.Model.PharmacyManagementDB();
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.CHITIETDONTHUOC.Load();
            // This line of code is generated by Data Source Configuration Wizard
            receiptDetailsBindingSource.DataSource = dbContext.CHITIETDONTHUOC.Local.ToBindingList();
            currentEmployee = employee;
        }

        private void frm_SellMedicine_Load(object sender, EventArgs e)
        {
            FillList();
        }

        private void FillList()
        {
            THUOC tHUOC = new THUOC();
            listBox_AvailableMedicine.DataSource = medicineServices.GetMedicineList();
            listBox_AvailableMedicine.DisplayMember = "TenThuoc";
            listBox_AvailableMedicine.ValueMember = "MaThuoc";
        }
        // Handle exception and show error message
        private void HandleException(Exception ex)
        {
            if (ex.InnerException != null && string.IsNullOrEmpty(ex.InnerException.Message))
            {
                ShowErrorMessage(ex.ToString());
            }
            else
            {
                ShowErrorMessage(ex.Message);
            }

            // Print error details to the Debug output
            System.Diagnostics.Debug.WriteLine(ex.ToString());
        }
        private Icon GetIcon(string iconName)
        {
            string iconPath = Path.Combine(Path.GetFullPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"..\..")), $"icon/{iconName}_icon.ico");

            if (File.Exists(iconPath))
            {
                return new Icon(iconPath);
            }
            else
            {
                throw new FileNotFoundException($"Icon file {iconName}_icon.ico not found in icon directory");
            }
        }
        private void ShowMessageBox(String message, Icon icon = null) // set to = null or any default value to accept only 1 provided parameter
        {
            try
            {
                XtraMessageBoxArgs args = new XtraMessageBoxArgs();
                args.Text = message;
                args.Buttons = new DialogResult[] { DialogResult.OK };
                args.Showing += Error_Args_Showing;
                if (icon != null)
                {
                    args.Icon = icon;
                }
                XtraMessageBox.Show(args);
            }
            catch (Exception ex)
            {
                HandleException(ex);
            }
        }
        private void ShowErrorMessage(string errorMessage)
        {
            Icon errorIcon = null;
            try
            {
                errorIcon = GetIcon("error");
            }
            catch (FileNotFoundException fnfe)
            {
                XtraMessageBox.Show($"Error loading icon{fnfe.Message}");
                errorIcon = SystemIcons.Error;
            }
            ShowMessageBox(errorMessage, errorIcon);
        }
        private void Add_Args_Showing(object sender, XtraMessageShowingArgs e)
        {
            // Main form style
            e.MessageBoxForm.StartPosition = FormStartPosition.CenterParent;
            e.MessageBoxForm.FormBorderStyle = FormBorderStyle.None;
            e.MessageBoxForm.Appearance.BackColor = ColorTranslator.FromHtml("#d6d6d6");
            e.MessageBoxForm.Appearance.FontStyleDelta = FontStyle.Bold;
            e.MessageBoxForm.Appearance.FontSizeDelta = 4;

            // Text Message style
            e.MessageBoxForm.Appearance.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
            e.MessageBoxForm.Appearance.TextOptions.VAlignment = DevExpress.Utils.VertAlignment.Center;

            // Ok button style
            e.Buttons[DialogResult.OK].Text = "Đăng xuất";
            e.Buttons[DialogResult.OK].Appearance.FontSizeDelta = 4;
            e.Buttons[DialogResult.OK].Appearance.FontStyleDelta = FontStyle.Bold;
            e.Buttons[DialogResult.OK].Padding = new Padding(10); // Vì một nguyên nhân nào đó nó set padding cho cả 2 nút thay vì chỉ set cho chính nó

            // Cancel button style
            e.Buttons[DialogResult.Cancel].Text = "Hủy";
            e.Buttons[DialogResult.Cancel].Appearance.FontSizeDelta = 4;
            e.Buttons[DialogResult.Cancel].Appearance.FontStyleDelta = FontStyle.Bold;
        }
        private void Error_Args_Showing(object sender, XtraMessageShowingArgs e)
        {
            // MessageBox Appearance
            e.MessageBoxForm.StartPosition = FormStartPosition.CenterParent;
            e.MessageBoxForm.FormBorderStyle = FormBorderStyle.None;
            e.MessageBoxForm.Appearance.BackColor = ColorTranslator.FromHtml("#d6d6d6");
            e.MessageBoxForm.Appearance.FontStyleDelta = FontStyle.Bold;
            e.MessageBoxForm.Appearance.FontSizeDelta = 4;

            // Error Message style
            e.MessageBoxForm.Appearance.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
            e.MessageBoxForm.Appearance.TextOptions.VAlignment = DevExpress.Utils.VertAlignment.Center;

            // Ok button style
            e.Buttons[DialogResult.OK].Text = "OK";
            e.Buttons[DialogResult.OK].Appearance.FontSizeDelta = 4;
            e.Buttons[DialogResult.OK].Appearance.FontStyleDelta = FontStyle.Bold;
            e.Buttons[DialogResult.OK].Padding = new Padding(10);
        }
        private void View_Args_Showing(object sender, XtraMessageShowingArgs e)
        {
            // Main form style
            e.MessageBoxForm.StartPosition = FormStartPosition.CenterParent;
            e.MessageBoxForm.FormBorderStyle = FormBorderStyle.None;
            e.MessageBoxForm.Appearance.BackColor = ColorTranslator.FromHtml("#d6d6d6");
            e.MessageBoxForm.Appearance.FontStyleDelta = FontStyle.Bold;
            e.MessageBoxForm.Appearance.FontSizeDelta = 4;

            // Text Message style
            e.MessageBoxForm.Appearance.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
            e.MessageBoxForm.Appearance.TextOptions.VAlignment = DevExpress.Utils.VertAlignment.Center;

            // Ok button style
            e.Buttons[DialogResult.OK].Text = "OK";
            e.Buttons[DialogResult.OK].Appearance.FontSizeDelta = 4;
            e.Buttons[DialogResult.OK].Appearance.FontStyleDelta = FontStyle.Bold;
        }
        private void ShowSuccessMessage(string message)
        {
            Icon sucessIcon = null;
            try
            {
                sucessIcon = GetIcon("success");
            }
            catch (FileNotFoundException fnfe)
            {
                XtraMessageBox.Show($"Error loading icon{fnfe.Message}");
                sucessIcon = SystemIcons.Error;
            }
            ShowMessageBox(message, sucessIcon);
        }
        private DialogResult ShowConfirmationMessage(string message)
        {
            try
            {
                Icon icon = GetIcon("question");

                XtraMessageBoxArgs args = new XtraMessageBoxArgs();
                args.Text = message;
                args.Buttons = new DialogResult[] { DialogResult.Yes, DialogResult.No };
                args.Showing += Confirm_Args_Showing;
                if (icon != null)
                {
                    args.Icon = icon;
                }
                return XtraMessageBox.Show(args);
            }
            catch (Exception ex)
            {
                HandleException(ex);
                return DialogResult.No;
            }
        }
        private void Confirm_Args_Showing(object sender, XtraMessageShowingArgs e)
        {
            // Main form style
            e.MessageBoxForm.StartPosition = FormStartPosition.CenterParent;
            e.MessageBoxForm.FormBorderStyle = FormBorderStyle.None;
            e.MessageBoxForm.Appearance.BackColor = ColorTranslator.FromHtml("#d6d6d6");
            e.MessageBoxForm.Appearance.FontStyleDelta = FontStyle.Bold;
            e.MessageBoxForm.Appearance.FontSizeDelta = 4;

            // Text Message style
            e.MessageBoxForm.Appearance.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
            e.MessageBoxForm.Appearance.TextOptions.VAlignment = DevExpress.Utils.VertAlignment.Center;

            // Yes button style
            e.Buttons[DialogResult.Yes].Text = "Xác nhận";
            e.Buttons[DialogResult.Yes].Appearance.FontSizeDelta = 4;
            e.Buttons[DialogResult.Yes].Appearance.FontStyleDelta = FontStyle.Bold;
            e.Buttons[DialogResult.Yes].Padding = new Padding(10); // Vì một nguyên nhân nào đó nó set padding cho cả 2 nút thay vì chỉ set cho chính nó

            // No button style
            e.Buttons[DialogResult.No].Text = "Hủy";
            e.Buttons[DialogResult.No].Appearance.FontSizeDelta = 4;
            e.Buttons[DialogResult.No].Appearance.FontStyleDelta = FontStyle.Bold;
        }
        private void txt_SearchMedicine_TextChanged(object sender, EventArgs e)
        {
            try
            {
                listBox_AvailableMedicine.Items.Clear();
                var newList = medicineServices.GetMedicineList(txt_SearchMedicine.Text);
                listBox_AvailableMedicine.DataSource = newList;
            }
            catch (Exception ex)
            {
                HandleException(ex);
            }
        }

        private void FillFields(string medicineId)
        {
            THUOC medicine = medicineServices.GetMedicineById(medicineId);

            if (medicine != null)
            {
                List<LOTHUOC> batchList = batchServices.GetBatchList(medicine.MaThuoc);
                if (batchList == null || batchList.Count == 0)
                {
                    ShowMessageBox("Không có lô tương ứng với thuốc");
                    return;
                }

                txt_ID.Text = medicine.MaThuoc;
                txt_Name.Text = medicine.TenThuoc;
                cbb_ProductionDate.DataSource = batchList;
                cbb_ProductionDate.DisplayMember = "NgaySanXuat";
                cbb_ProductionDate.ValueMember = "MaLo";
                
                cbb_ProductionDate.SelectedIndex = batchList.Count > 0 ? 0 : -1;

                txt_PricePerUnit.Text = medicine.GiaDonVi.ToString();
                txt_TotalPrice.Text = (numUpDown_BuyAmount.Value * medicine.GiaDonVi).ToString();

                if (cbb_ProductionDate.SelectedIndex != -1)
                {
                    LOTHUOC selectedBatch = (LOTHUOC)cbb_ProductionDate.SelectedItem;
                    if (selectedBatch != null)
                    {
                        DateTime? expirationDate = batchServices.GetExpiration(cbb_ProductionDate.SelectedValue.ToString(), selectedBatch.NgaySanXuat);
                        System.Diagnostics.Debug.WriteLine($"Exp Date: {expirationDate?.ToString("dd/MM/yyyy")}");
                        txt_ExpDate.Text = expirationDate?.ToString("dd/MM/yyyy");
                    }
                }
                else
                {
                    txt_ExpDate.Text = "Invalid Date";
                }
            }
            else
            {
                ShowMessageBox("Không tìm thấy thuốc");
            }
        }

        private void listBox_AvailableMedicine_Click(object sender, EventArgs e)
        {
            if (listBox_AvailableMedicine.SelectedItems.Count > 0)
            {
                string medicineId = listBox_AvailableMedicine.SelectedValue.ToString();
                FillFields(medicineId);
            }
        }

        private void numUpDown_BuyAmount_ValueChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txt_ID.Text) && !string.IsNullOrEmpty(txt_Name.Text) && !string.IsNullOrEmpty(txt_PricePerUnit.Text))
            {
                THUOC medicine = medicineServices.GetMedicineById(txt_ID.Text);
                txt_TotalPrice.Text = (numUpDown_BuyAmount.Value * medicine.GiaDonVi).ToString();
            }
        }

        private long totalCartPrice = 0;
        private void btn_AddToCart_Click(object sender, EventArgs e)
        {
            try
            {
                if (!String.IsNullOrEmpty(txt_ID.Text) && !String.IsNullOrEmpty(cbb_ProductionDate.Text))
                {

                    bool itemExists = false;

                    int unitPrice = int.Parse(txt_PricePerUnit.Text.ToString());
                    int quantityToAdd = (int)numUpDown_BuyAmount.Value;
                    int itemTotalPrice = unitPrice * quantityToAdd;

                    // Iterate through rows to check if the item already exists in the cart
                    foreach (DataGridViewRow row in dgv_SellCart.Rows)
                    {
                        if (row.Cells[0].Value != null && row.Cells[2].Value != null &&
                            row.Cells[0].Value.ToString() == txt_ID.Text && // Match ID
                            row.Cells[2].Value.ToString() == cbb_ProductionDate.Text) // Match Production Date
                        {
                            // Update quantity and total price
                            int existingQuantity = int.Parse(row.Cells[4].Value.ToString());
                            int newQuantity = existingQuantity + quantityToAdd;
                            row.Cells[4].Value = newQuantity;

                            int oldTotalPrice = int.Parse(row.Cells[5].Value.ToString());
                            row.Cells[5].Value = (newQuantity * unitPrice);

                            totalCartPrice += (newQuantity * unitPrice) - oldTotalPrice;

                            itemExists = true;
                            break;
                        }
                    }

                    // If the item is not already in the cart, add it as a new row
                    if (!itemExists)
                    {
                        int rowIndex = dgv_SellCart.Rows.Add();
                        dgv_SellCart.Rows[rowIndex].Cells[0].Value = txt_ID.Text; // ID
                        dgv_SellCart.Rows[rowIndex].Cells[1].Value = txt_Name.Text; // Name
                        dgv_SellCart.Rows[rowIndex].Cells[2].Value = cbb_ProductionDate.Text; // Production Date
                        dgv_SellCart.Rows[rowIndex].Cells[3].Value = txt_ExpDate.Text; // Expiration Date
                        dgv_SellCart.Rows[rowIndex].Cells[4].Value = numUpDown_BuyAmount.Value; // Quantity
                        dgv_SellCart.Rows[rowIndex].Cells[5].Value = txt_TotalPrice.Text; // Total Price

                        totalCartPrice += (long)itemTotalPrice;
                    }

                    txt_TotalCartPrice.Text = totalCartPrice.ToString();
                }
                else
                {
                    ShowErrorMessage("Please select a valid item and production date.");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex);
            }
        }

        private void btn_Discard_Click(object sender, EventArgs e)
        {
            if (dgv_SellCart.SelectedRows.Count > 0)
            {
                for (int i = dgv_SellCart.SelectedRows.Count - 1; i >= 0 ; i--)
                {
                    int index = dgv_SellCart.Rows.IndexOf(dgv_SellCart.SelectedRows[i]);
                    dgv_SellCart.Rows.RemoveAt(i);
                }
            }
        }

        private string GenerateReceiptContent(DONTHUOC receiptContent)
        {
            List<CHITIETDONTHUOC> receiptDetails = receiptServices.GetReceiptDetails(receiptContent);
            // Collect receipt information (data from DataGridView or any other source)
            StringBuilder receipt = new StringBuilder();

            // Add Header
            receipt.AppendLine("-------- Pharmacy Receipt --------");
            receipt.AppendLine($"Receipt ID: {receiptContent.MaDonThuoc}");
            receipt.AppendLine($"Date: {receiptContent.NgayLenDon}");
            receipt.AppendLine("---------------------------------");

            // Iterate through items in the cart
            foreach (CHITIETDONTHUOC details in receiptDetails)
            {
                THUOC medicine = medicineServices.GetMedicineById(details.MaThuoc.ToString());

                string itemName = medicine.TenThuoc.ToString();
                string productionDate = batchServices.GetBatchByMedIdAndExpDate(details.MaThuoc, details.NgayHetHan.Date).NgaySanXuat.ToString();
                string expirationDate = details.NgayHetHan.ToString();
                string quantity = details.SoLuong.ToString();
                string price = (medicine.GiaDonVi * details.SoLuong).ToString();

                receipt.AppendLine($"Item: {itemName} | Production Date: {productionDate} | Expiry: {expirationDate}");
                receipt.AppendLine($"Quantity: {quantity} | Price: {price}");
            }

            // Add total price
            receipt.AppendLine("---------------------------------");
            receipt.AppendLine($"Total Price: {txt_TotalCartPrice.Text}");
            receipt.AppendLine("Thank you for shopping with us!");
            receipt.AppendLine("-------- End of Receipt --------");

            return receipt.ToString();
        }

        private async Task<KHACHHANG> GetCustomer(KHACHHANG customer)
        {
            var filloutCustomerInfoEvent = new TaskCompletionSource<bool>();

            // Event handler for when the Confirm button is clicked
            simpleButton_EnterCustomer.Click += (s, args) =>
            {
                if (!filloutCustomerInfoEvent.Task.IsCompleted)
                {
                    String customerName = txt_InputCusName.Text,
                           customerAddress = txt_InputAddress.Text,
                           customerPhone = txt_InputPhone.Text,
                           customerEmail = txt_InputEmail.Text;

                    if ((String.IsNullOrEmpty(customerName) || String.IsNullOrEmpty(customerAddress)) && !String.IsNullOrEmpty(customerPhone) && !String.IsNullOrEmpty(customerEmail))
                    {
                        customer = new KHACHHANG()
                        {
                            HoTen = customerName,
                            DiaChi = customerAddress,
                            SoDienThoai = customerPhone,
                            Email = customerEmail,
                        };
                        popupContainerControl_GetCustomerInfo.Hide();

                        // Signal the filloutCustomerInfoEvent (set it to true) so that the waiting thread can proceed
                        filloutCustomerInfoEvent.SetResult(true);
                    }
                    else
                    {
                        filloutCustomerInfoEvent.SetResult(false);
                        ShowErrorMessage("Vui lòng điền đủ thông tin của khách hàng");
                    }
                }
            };

            // Event handler for when the Cancel button is clicked
            simpleButton_Cancel.Click += (s, args) =>
            {
                if (!filloutCustomerInfoEvent.Task.IsCompleted)
                {
                    if (popupContainerControl_GetCustomerInfo.Visible)
                    {
                        popupContainerControl_GetCustomerInfo.Hide();
                        filloutCustomerInfoEvent.SetResult(false);
                        throw new Exception("Hủy xử lý thành công");
                    }
                }
            };
            popupContainerControl_GetCustomerInfo.Show();
            // Wait for the filloutCustomerInfoEvent to be set (i.e., the user has confirmed a selection)
            // The thread will pause here until the user selects a provider and clicks "Confirm"
            await filloutCustomerInfoEvent.Task;

            return customer;
        }

        private void ShowReceiptPopup(DONTHUOC receipt)
        {
            //// Set the content inside the popup (use a label or rich text box inside your form)
            //txt_EmployeeMade.Text = receiptContent;  // Assuming `txt_EmployeeMade` is a label or rich text box used for displaying the receipt

            popupContainerControl_Receipt.Left = (this.ClientSize.Width - popupContainerControl_Receipt.Width) / 2;
            popupContainerControl_Receipt.Top = (this.ClientSize.Height - popupContainerControl_Receipt.Height) / 2;
            // Show the popup
            popupContainerControl_Receipt.Show();
        }

        private void SaveReceiptToFile(string receiptId, string receiptContent)
        {
            try
            {
                // Ensure the directory exists
                if (!Directory.Exists(receiptSavePath))
                {
                    Directory.CreateDirectory(receiptSavePath);
                }

                // Generate the file path
                string filePath = Path.Combine(receiptSavePath, $"Receipt_{receiptId}.txt");

                // Write the receipt content to the file
                File.WriteAllText(filePath, receiptContent);
            }
            catch (Exception ex)
            {
                // Handle exceptions (e.g., log the error, display a message, etc.)
                MessageBox.Show($"Failed to save receipt: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }


        private async Task<bool> Checkout()
        {
            try
            {
                // Generate a null customer if no customer information is provided
                KHACHHANG customer = receiptServices.GenerateNullCustomer();

                // Save customer information if the checkbox is checked
                if (check_SaveCustomerInfo.Checked)
                {
                    customer = await GetCustomer(customer);
                }

                System.Diagnostics.Debug.WriteLine("Processed Customer Info:");
                System.Diagnostics.Debug.WriteLine($"ID: {customer.MaKhachHang}");
                System.Diagnostics.Debug.WriteLine($"Full name: {customer.HoTen}");
                System.Diagnostics.Debug.WriteLine($"Address: {customer.DiaChi}");
                System.Diagnostics.Debug.WriteLine($"Email: {customer.Email}");
                System.Diagnostics.Debug.WriteLine($"Phone Number: {customer.SoDienThoai}");

                // Add customer to database
                receiptServices.AddCustomer(customer);

                // Build receipt detail
                receiptServices.ProcessPurchase(receiptServices.GetCartItemsFromGrid(dgv_SellCart), customer, currentEmployee, out DONTHUOC receipt);

                // Show success message
                ShowSuccessMessage("Thanh toán thành công");
                
                // Save and Display receipt
                ShowReceiptPopup(receipt);
                SaveReceiptToFile(receipt.MaDonThuoc, GenerateReceiptContent(receipt));

                // Clear the cart
                dgv_SellCart.Rows.Clear();
                totalCartPrice = 0;
                txt_TotalCartPrice.Text = "0";

                return true;
            }
            catch (DbEntityValidationException ex)
            {
                foreach (var validationErrors in ex.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        System.Diagnostics.Debug.WriteLine($"Property: {validationError.PropertyName} Error: {validationError.ErrorMessage}");
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                HandleException(ex);
                return false;
            }
        }
        private async void btn_Checkout_Click(object sender, EventArgs e)
        {
            try
            {
                bool isCheckedout = await Checkout();
                // Checkout the order details
                if (!isCheckedout)
                {
                    ShowMessageBox("Thanh toán thất bại");
                }
            }
            catch (Exception ex)
            {
                HandleException(ex);
            }
        }
    }
}
